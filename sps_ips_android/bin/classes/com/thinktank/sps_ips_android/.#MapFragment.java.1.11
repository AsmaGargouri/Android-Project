package com.thinktank.sps_ips_android;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Matrix;
import android.graphics.drawable.Drawable;
import android.location.Location;
import android.net.wifi.ScanResult;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.provider.Settings;
import android.support.v4.app.Fragment;
import android.telephony.CellInfo;
import android.telephony.CellLocation;
import android.telephony.NeighboringCellInfo;
import android.telephony.PhoneStateListener;
import android.telephony.TelephonyManager;
import android.text.Html;
import android.text.Spanned;
import android.text.TextUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;

import com.thinktank.sps_ips_android.Model.Catch;
import com.thinktank.sps_ips_android.Model.GsmCell;
import com.thinktank.sps_ips_android.Model.Wifi;
import com.thinktank.sps_ips_android.Model.WifiCatched;

public class MapFragment extends Fragment {

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {

		RelativeLayout view = (RelativeLayout) inflater.inflate(
				R.layout.map_fragment, container, false);

		ImageView DefaultImageViewMap = (ImageView) view
				.findViewById(R.id.imageMap);

		DefaultImageViewMap.setOnTouchListener(MapOnTouchListener);
		return view;
	}

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
	}

	public void onResume() {
		super.onResume();
	}

	OnTouchListener MapOnTouchListener = new OnTouchListener() {
		@Override
		public boolean onTouch(View v, MotionEvent event) {
			if (event.getAction() == MotionEvent.ACTION_DOWN) {

				ImageView map = (ImageView) getView().findViewById(
						R.id.imageMap);
				float[] f = new float[9];
				map.getImageMatrix().getValues(f);
				final float scaleX = f[Matrix.MSCALE_X];
				final float scaleY = f[Matrix.MSCALE_Y];
				final Drawable d = map.getDrawable();
				final int originalW = d.getIntrinsicWidth();
				final int originalH = d.getIntrinsicHeight();
				final int actualW = Math.round(originalW * scaleX);
				final int actualH = Math.round(originalH * scaleY);
				Log.d("Dimensions of the image", "[" + originalW + ","
						+ originalH + "] -> [" + actualW + "," + actualH
						+ "] & scales: x=" + scaleX + " y=" + scaleY);
				MainActivity.widthImage = map.getWidth();
				MainActivity.heightImage = map.getHeight();
				MainActivity.originaHImage = originalH ; 
				MainActivity.originalWImage = originalW ;
				double imageViewRatio = (double) map.getWidth()
						/ (double) map.getHeight();
				double imgRatio = (double) ((actualW * scaleX) / (actualH * scaleY));
				double h = 0, w = 0;
				double x = 0, y = 0;
			
				if (imgRatio > imageViewRatio) {
					h = (imageViewRatio / imgRatio) * map.getHeight();
					y = (map.getHeight() - h) / 2;
				} else {
					w = (imgRatio / imageViewRatio) * map.getWidth();
					x = (map.getWidth() - w) / 2;
				}

				Log.e("x,y",x+"**"+y+"");
				
				x = event.getX() - x;
				y = event.getY() - y;
				
				
				Log.e("cordoonnées x y",x+"**"+y+"");
				Log.e("positionsx y",event.getX()+"''"+event.getY());			
				

				if ((x > 0) & (x < actualW) & (y > 0) & (y < actualH)) {

					CatchDataBaseHandler db = new CatchDataBaseHandler(
							getActivity());

					DateFormat df = new SimpleDateFormat("dd/MM/yy HH:mm:ss");
					Calendar calobj = Calendar.getInstance();
					System.out.println(df.format(calobj.getTime()));

					Catch p1 = new Catch(x, y, "", "");
					long p1_id = db.createCatch(p1);
					p1.setId_catch((int) p1_id);

					Log.e("Position Count", "position Count: "
							+ db.getAllCatchs().size());

					Log.e("Position Count", "position Count: "
							+ db.getAllCatchs().size());

					List<Catch> catchs = db.getAllCatchs();
					for (Catch ct : catchs) {
						String log = "from database: Id: " + ct.getId_catch()
								+ " ,x: " + ct.getX() + " ,y: " + ct.getY();
						Log.d("catchs: ", log);
					}

					String messageToDisplay = "";
					placePin(event.getX(), event.getY());

					messageToDisplay = messageToDisplay + gpsInformations()
							+ wifiInformations((int) p1_id);

					gsmInformations((int) p1_id);
					updateNeighboringCids(new ArrayList<NeighboringCellInfo>());

					AlertDialog.Builder alertDialog = new AlertDialog.Builder(
							getActivity());

					CharSequence sequenceMsg = TextUtils.concat(
							gpsInformations(), wifiInformations((int) p1_id));

					alertDialog.setTitle("Informations");
					alertDialog.setNeutralButton("OK", null);
					alertDialog.setMessage(sequenceMsg);

					alertDialog.show();

					Log.e("All wifi Count", "wifi count: "
							+ db.getAllWifi().size());

					List<Wifi> wifis = db.getAllWifi();
					for (Wifi wi : wifis) {
						String log = "Id: " + wi.getBSSID() + ",nom: "
								+ wi.getSSID() + ",cap :  "
								+ wi.getCapabilities() + ",freq : "
								+ wi.getFrequency();

						Log.d("wifi: ", log);

					}

					Log.d("wifi de cette position", "wifi de cette position");
					List<Wifi> OnePositionWifisList = db.getAllWifisByCatch(p1
							.getId_catch());
					for (Wifi wi : OnePositionWifisList) {
						Log.d("wifi of this position", "" + wi.getSSID());
					}

					List<GsmCell> OnePositionCellList = db
							.getAllGsmCellsByCatch(p1.getId_catch());
					for (GsmCell gsm : OnePositionCellList) {
						Log.d("gsmm of this position", "" + gsm.getCid() + ""
								+ gsm.getLac());
					}
					List<GsmCell> allGsm = db.getAllCells();
					for (GsmCell gsm : allGsm) {
						Log.d("gsmm" + "", "" + gsm.getCid());
					}

					List<WifiCatched> wcatchs = db.getAllFromWifiCatched();
					for (WifiCatched ct : wcatchs) {
						String log = "from database: Id: " + ct.getId_catch()
								+ "xifi" + ct.getBSSID() + "strength"
								+ ct.getStrength();
						Log.d("catchWIFIFROM TAAABLE !!! : ", log);

					}
					db.close();
				}

			}

			return true;
		}

	};

	private void placePin(float X, float Y) {
		int touchX = (int) X;
		int touchY = (int) Y;

		RelativeLayout rl = (RelativeLayout) getActivity().findViewById(
				R.id.relativeLayoutMap);
		ImageView PinImgViewConstant = new ImageView(getActivity());

		PinImgViewConstant.setImageResource(R.drawable.mapconstantpin);
		RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(
				30, 30);
		PinImgViewConstant.setLayoutParams(params);
		params.leftMargin = touchX - 20;
		params.topMargin = touchY - 20;
		rl.addView(PinImgViewConstant, params);
		PinImgViewConstant.bringToFront();

	}


	private CharSequence gpsInformations() {
		GPSTracker gps = new GPSTracker(getActivity());

		Spanned formattedText;

		CharSequence sequenceMsg;

		String messageToDisplay = "<br/>GPS informations \n";

		formattedText = Html.fromHtml("<font color='#7FC6BC'><b>"
				+ messageToDisplay + ": </b></font>");
		sequenceMsg = formattedText;

		if (gps.canGetLocation()) {
			Location loc = gps.getLocation();
			if (loc != null) {
				formattedText = Html
						.fromHtml(" <br/> <font color='#046380'><b> Latitude : </b></font>"
								+ loc.getLatitude() + "\n . ");

				sequenceMsg = TextUtils.concat(sequenceMsg, formattedText);

				formattedText = Html
						.fromHtml(" <br/> <font color='#046380'><b> Longitude : </b></font>"
								+ loc.getLongitude() + "\n . ");

				sequenceMsg = TextUtils.concat(sequenceMsg, formattedText);
			}

			else {
				sequenceMsg = "cannot retrieve location!!";
			}
		} else {
			gps.showSettingsAlert();
		}
		return sequenceMsg;
	}

	private CharSequence wifiInformations(final int p1_id) {

		final CatchDataBaseHandler db = new CatchDataBaseHandler(getActivity());

		Spanned formattedText;

		CharSequence sequenceMsg;

		String messageToDisplay = "<br/>WIFI informations \n";

		formattedText = Html.fromHtml("<font color='#7FC6BC'><b>"
				+ messageToDisplay + ": </b></font>");
		sequenceMsg = formattedText;

		WifiManager wifiManager = (WifiManager) getActivity().getSystemService(
				Context.WIFI_SERVICE);

		if (wifiManager.isWifiEnabled()) {

			wifiManager = (WifiManager) getActivity().getSystemService(
					Context.WIFI_SERVICE);

			List<ScanResult> wifiList = null;

			List<Integer> SommesStrength = new ArrayList<Integer>();

			for (int i = 0; i < 10; i++) {

				wifiManager.startScan();

				wifiList = wifiManager.getScanResults();

				if (i == 0) {
					for (int j = 0; j < wifiList.size(); j++) {

						SommesStrength.add(0);
					}
				}

				for (int j = 0; j < wifiList.size(); j++) {
					SommesStrength.set(j,
							SommesStrength.get(j) + wifiList.get(j).level);
				}

			}

			for (int i = 0; i < wifiList.size(); i++) {
				System.out.println(wifiList.get(i).toString());

				Wifi w1 = new Wifi(wifiList.get(i).BSSID, wifiList.get(i).SSID,
						wifiList.get(i).frequency, wifiList.get(i).capabilities);
				db.createWifi(w1, new long[] { p1_id },
						(int) Math.round(SommesStrength.get(i) / 10));
				formattedText = Html
						.fromHtml(" <br/> <font color='#046380'><b> "
								+ wifiList.get(i).SSID + ": </b></font>"
								+ (int) Math.round(SommesStrength.get(i) / 10)
								+ "\n . ");

				sequenceMsg = TextUtils.concat(sequenceMsg, formattedText);

			}

		}

		else {
			showWifiSettingAlerts();
			sequenceMsg = "WIFI not on";
		}

		db.close();
		return sequenceMsg;

	}

	public void showWifiSettingAlerts() {

		AlertDialog.Builder alertDialog = new AlertDialog.Builder(getActivity());

		alertDialog.setTitle("wifi settings");

		alertDialog
				.setMessage("wifi not enabled. Do you want to go to settings menu?");

		alertDialog.setPositiveButton("Settings",
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int which) {
						Intent intent = new Intent(
								Settings.ACTION_WIFI_SETTINGS);
						getActivity().startActivity(intent);
					}
				});

		alertDialog.setNegativeButton("Cancel",
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int which) {
						dialog.cancel();
					}
				});

		alertDialog.show();

	}

	public void gsmInformations(final int p1_id) {
		final CatchDataBaseHandler db = new CatchDataBaseHandler(getActivity());

		TelephonyManager Tel;
		GsmSignalListener gsmSigListener;

		gsmSigListener = new GsmSignalListener();
		Tel = (TelephonyManager) getActivity().getSystemService(
				Context.TELEPHONY_SERVICE);
		Tel.listen(gsmSigListener, PhoneStateListener.LISTEN_SIGNAL_STRENGTHS);

		ArrayList<NeighboringCellInfo> neighbors = new ArrayList<NeighboringCellInfo>();
		neighbors = (ArrayList) Tel.getNeighboringCellInfo();

		List<CellInfo> cells = new ArrayList<CellInfo>();
		cells = Tel.getAllCellInfo();

		Log.e("CellNeighInfo", neighbors.size() + "");

		for (NeighboringCellInfo n : neighbors) {
			Log.e("CellInfo Cid", "" + n.getCid());
			Log.e("CellInfo Lac", "" + n.getLac());
			Log.e("CellInfo Psc", "" + n.getPsc());
			Log.e("CellInfo Rssi", "" + n.getRssi());

			GsmCell cell = new GsmCell(n.getCid(), n.getLac(), n.getPsc());

			db.createGsmCell(cell, new long[] { p1_id }, n.getRssi());

		}

		updateNeighboringCids(neighbors);
		String networkOperator = Tel.getNetworkOperator();
		int type = Tel.getNetworkType();
		String mcc = networkOperator.substring(0, 3);
		String mnc = networkOperator.substring(3);
		Log.e("mcc,mnc", mcc + ":" + mnc + "");

		CellLocation l = Tel.getCellLocation();
		Log.e("get location", l.toString());

		db.close();
	}

	private final void updateNeighboringCids(ArrayList<NeighboringCellInfo> cids) {

		StringBuilder sb = new StringBuilder();

		if (cids != null) {
			if (cids.isEmpty()) {
				sb.append("no neighboring cells");
			} else {
				for (NeighboringCellInfo cell : cids) {
					sb.append(cell.toString()).append(" ");
				}
			}
		} else {
			sb.append("unknown");
		}
		System.out.println(sb.toString());
	}

}
